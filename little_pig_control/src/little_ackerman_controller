#!/usr/bin/env python

import math
import numpy
import threading

from math import pi

import rospy
import tf

from ackermann_msgs.msg import AckermannDrive
from std_msgs.msg import Float64
from controller_manager_msgs.srv import ListControllers

class _LittleAckermannCtrlr(object):

    # [x] - Build init.
    def __init__(self):

        rospy.init_node("ackermann_cotnroller")

        # Front Wheels
        (left_steer_link_name, left_steer_ctrlr_name, left_front_axle_ctrlr_name, self._left_front_inv_circ) = self._get_front_wheel_params("left")
        (right_steer_link_name, right_steer_ctrlr_name, right_front_axle_ctlrlr_name, self._right_front_inv_circ) self._get_front_wheel_params("right")

        # Rear Wheels
        (left_rear_link_name, left_rear_axle_ctrlr_name, self._left_rear_inv_circ) = self._get_rear_wheel_params("left")
        (right_rear_link_name, right_rear_axle_ctrlr_name, self._right_rear_inv_circ) = self._get_rear_wheel_params("right")


        list_ctrlrs = rospy.ServiceProxy("controller_manager/list_controllers", ListControllers)
        list_ctrlrs.wait_for_service()

        # [x] - Command timeout
        try:
            self._cmd_timeout = float(rospy.get_param("~cmd_timeout", self._DEF_CMD_TIMEOUT))
        except:
            rospy.logwarn("The specified command timeout value is invalid. ")
            self._cmd_timeout = self._DEF_CMD_TIMEOUT
    
        # [X] - Publish frequency
        try:
            pub_freq = float(rospy.get_param("~publishing_frequency", self._DEF_PUB_FREQ))

            if pub_freq <= 0.0:
                raise ValueError()
        except:
            rospy.logwarn("The specified publish frequency is invalid. ")
            pub_freq = self._DEF_PUB_FREQ
        
        self._sleep_timer = rospy.Rate(pub_freq)

        # Define the last time Ackermann driving command was received.
        self._last_cmd_time = rospy.get_time()

        # Define Ackermann cmd lock
        #  - This will control access to steer_ang, steer_ang_vel, speed, accel
        self._ackermann_cmd_lock = threading.Lock()
        self._steer_ang = 0.0
        self._steer_ang_vel = 0.0
        self._speed = 0.0
        self._accel = 0.0

        self._last_steer_ang = 0.0
        self._theta_left = 0.0
        self._theta_right = 0.0

        self._last_speed = 0.0
        self._last_accel_limit = 0.0

        self._left_front_ang_vel = 0.0
        self._right_front_ang_vel = 0.0
        self._left_rear_ang_vel = 0.0
        self._right_rear_ang_vel = 0.0

        # Listen to the TF made availble during launch
        tfl = tf.TransformListener()

        # Define the front left and right steering links 
        lsl_pos = self._get_link_postion(tfl, left_steer_link_name)
        rsl_pos = self._get_link_postion(tfl, right_steer_link_name)

        self._joint_dist_div_2 = numpy.linalg.norm(lsl_pos - rsl_pos) / 2

        # Define the rear left and right wheel links
        lrw_pos = self._get_rear_wheel_params(tfl, left_rear_link_name)
        rrw_pos = self._get_rear_wheel_params(tfl, right_rear_link_name)

        # Calculate the centers of the front and rear wheels
        front_center_pos = (lsl_pos + rsl_pos) / 2
        rear_center_pos = (lrw_pos + rrw_pos) / 2

        # Calculate the wheelbase 
        self._wheelbase = numpy.linalg.norm(front_center_pos - rear_center_pos)
        self._inv_wheelbase = 1 / self._wheelbase
        self._wheelbase_sqr = self._wheelbase ** 2

        # Define the steering publishers
        self._left_steer_cmd_pub = _create_cmd_pub(list_ctrlrs, left_steer_ctrlr_name)
        self._right_steer_cmd_pub = _create_cmd_pub(list_ctrlrs, right_steer_ctrlr_name)

        # Define the axle publishers
        # - Ommiting the rear as the real pig doesn't have rear wheel drive
        self._left_front_axle_cmd_pub = _create_axle_cmd_pub(list_ctrlrs, left_front_axle_ctrlr_name)
        self._right_front_axle_cmd_pub = _create_axle_cmd_pub(list_ctrlrs, right_front_axle_ctlrlr_name)

        # Define the Ackermann Command subscriber
        self._ackermann_cmd_sub = rospy.Subscriber("ackermann_cmd", AckermannDrive, self.little_ackerman_cmd_cb, queue_size=1)

    # [x] - Build spin.
    def spin(self):

        last_time = rospy.get_time()

        while not rospy.is_shutdown():
            t = rospy.get_time()
            delta_t = t - last_time
            last_time = t

            if (self._cmd_timeout > 0.0 and t - self._last_cmd_time > self._cmd_timeout):
                
                steer_ang_changed, center_y = self._ctrl_steering(self._last_steer_ang, 0.0, 0.001)
                self._ctrl_axles(0.0, 0.0, 0.0, steer_ang_changed, center_y)
            elif delta_t > 0.0:
                with self._ackermann_cmd_lock:
                    steer_ang = self._steer_ang
                    steer_ang_vel = self._steer_ang_vel
                    speed = self._speed
                    accel = self._accel
                steer_ang_changed, center_y = self._ctrl_steering(steer_ang, steer_ang_vel, delta_t)
                self._ctrl_axles(speed, accel, delta_t, steer_ang_changed, center_y)

            # Publish the steering angle commands.
            self._left_steer_cmd_pub.publish(self._theta_left)
            self._right_steer_cmd_pub.publish(self._theta_right)

            # Publish the axle velocity commands.
            # Ommiting the rear axles as they are not driven
            if self._left_front_axle_cmd_pub:
                self._left_front_axle_cmd_pub.publish(self._left_front_ang_vel)
            if self._right_front_axle_cmd_pub:
                self._right_front_axle_cmd_pub.publish(self._right_front_ang_vel)

            self._sleep_timer.sleep()
    
    # [x] - Build callback.
    def little_ackermann_cmd_cb(self, ackermann_cmd):

        self._last_cmd_time = rospy.get_time()

        with self._ackermann_cmd_lock:
            self._steer_ang = ackermann_cmd.steering_angle
            self._steer_ang_vel = ackermann_cmd.steering_angle_velocity
            self._speed = ackermann_cmd.speed
            self._accel = ackermann_cmd.acceleration
    
    # [X] - Build front wheel params.
    def _get_front_wheel_params(self, side):

        prefix = "~" + side + "_front_wheel/"

        steer_link_name = rospy.get_param(prefix + "steering_link_name" + side + "steering_link")

        steer_ctrlr_name = rospy.get_param(prefix + "steering_controller_name", side + "_steering_contoller")

        axle_ctrlr_name, inv_circ = self._get_common_wheel_params(prefix)

        return steer_link_name, steer_ctrlr_name, axle_ctrlr_name, inv_circ
    
    # [x] - Build rear wheel params.
    def _get_rear_wheel_params(self, side):

        prefix = "~" + side + "_rear_wheel/"
        link_name = rospy.get_param(prefix + "link_name", side + "_wheel")
        axle_ctrlr_name, inv_circ = self._get_common_wheel_params(prefix)

        return link_name, axle_ctrlr_name, inv_circ

    # [x] - Build common wheel params.
    def _get_common_wheel_params(self, prefix):

        axle_ctrlr_name = rospy.get_param(prefix + "axle_controller_name", None)

        try:
            dia = float(rospy.get_param(prefix + "diameter", self._DEF_WHEEL_DIA))

            if dia <= 0.0:
                raise ValueError
        except:
            rospy.logwarn("The speficied wheel diameter is invalid. ")

            dia = self._DEF_WHEEL_DIA

        return axle_ctrlr_name, 1 / (pi * dia)

    # [x] - Build link positions.
    def _get_link_postion(self, tfl, link):

        while True:
            try:
                trans, not_used = tfl.lookupTransform(self._right_rear_link_name, link, rospy.Time(0))

                return numpy.arrar(trans)
            except:
                pass

    # [x] - Build control steering.
    def _ctrl_steering(self, steer_ang, steer_ang_vel_limit, delta_t):

        if steer_ang_vel_limit > 0.0:
            ang_vel = (steer_ang - self._last_steer_ang) / delta_t
            ang_vel = max(-steer_ang_vel_limit, min(ang_vel, steer_ang_vel_limit))

            theta = self._last_steer_ang + ang_vel * delta_t
        else:
            theta = steer_ang

        center_y = self._wheelbase * math.tan((pi / 2) - theta)

        steer_ang_changed = theta != self._last_steer_ang

        if steer_ang_changed:
            self._last_steer_ang = theta
            self._theta_left = _get_steer_ang(math.atan(self._inv_wheelbase * (center_y - self._joint_dist_div_2)))
            self._theta_right = _get_steer_ang(math.atan(self._inv_wheelbase * (center_y + self._joint_dist_div_2)))

        return steer_ang_changed. center_y

    # [x] - Build control axles.
    def _ctrl_axles(self, speed, accel_limit, delta_t, steer_ang_changed, center_y):

        if accel_limit > 0.0:
            self._last_accel_limit = accel_limit
            accel = (speed - self._last_speed) / delta_t
            accel = max(-accel_limit, min(accel, accel_limit))
            veh_speed = self._last_speed * delta_t
        else:
            self._last_accel_limit = accel_limit
            veh_speed = speed

        if veh_speed != self._last_speed or steer_ang_changed:
            self._last_speed = veh_speed
            left_dist = center_y - self._joint_dist_div_2
            right_dist = center_y + self._joint_dist_div_2

            # Front
            gain = (2 * pi) * veh_speed / abs(center_y)
            r = math.sqrt(left_dist ** 2 + self._wheelbase_sqr)
            self._left_front_ang_vel = gain * r * self._left_front_inv_circ
            r = math.sqrt(right_dist ** 2 + self._wheelbase_sqr)
            self._right_front_ang_vel = gain * r * self._right_rear_inv_circ

    _DEF_WHEEL_DIA = 1.0
    _DEF_CMD_TIMEOUT = 0.0
    _DEF_PUB_FREQ = 30.0

# End of LittleAckermannCtrlr Class

# [x] - Wait for the specified controller to in the running state.
def _wait_for_ctrlr(list_ctrlrs, ctrlr_name):

    while True:
        response = list_ctrlrs()
        
        for ctrlr in response.controller:
            if ctrlr.name == ctrlr_name:
                if ctrlr.state == "running":
                    return
                rospy.sleep(0.1)
                break

# [x] - Create axle command publisher.
def _create_axle_cmd_pub(list_ctrlrs, axle_ctrlr_name):

    if not axle_ctrlr_name:
        return None
    
    return _create_axle_cmd_pub(list_ctrlrs, axle_ctrlr_name)

# [x] - Create a command publisher.
def _create_cmd_pub(list_ctrlrs, ctrlr_name):

    _wait_for_ctrlr(list_ctrlrs, ctrlr_name)

    return rospy.Publisher(ctrlr_name + "/command", Float64, queue_size=1)

# [x] - Return the desired steering angle for a front wheel.
def _get_steer_ang(phi):

    if phi >= 0.0:
        return (pi / 2) - phi

    return (-pi / 2) - phi

# main
if __name__ == "__main__":
    ctrlr = _LittleAckermannCtrlr()
    ctrlr.spin()